{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/*###########################################
		AWS Allgemein
	#############################################*/
	"Add amplify config": {
		"prefix": "amplifyAddConfig",
		"body": [
			"import { Amplify } from 'aws-amplify';",
			"import awsconfig from '../aws-exports';",
			"",
			"Amplify.configure(awsconfig);"
		],
		"description": "Add amplify config to app.modules in client"
	},
	/*###########################################
		Angular
	#############################################*/
	"Add FileReader": {
		"prefix": "angularFileReader",
		"body": [
			"var reader = new FileReader();",
			"reader.readAsDataURL(file);",
			"reader.onload = (_event) => {",
			"fileUrl = reader.result;",
			"}"
		],
		"description": "Add amplify config to app.modules in client"
	},
	"REST post template": {
		"prefix": "angularRestPost",
		"body": [
			"async postObject(value) {",
			"var body = {",
			"key: value",
			"}",
			"var result;",
			"this.requestInit.body = body;",
			"",
			"await API.post(this.AWS_API, '/path', this.requestInit)",
			".then(response => {",
			"result = response;",
			"})",
			".catch(error => {",
			"result = { err: error };",
			"})",
			"",
			"return result;"
		],
		"description": "Add angular rest post"
	},
	"Add Angular Form Builder Group": {
		"prefix": "angularFormBuilderGroup",
		"body": [
			"formGroup: FormGroup;",
			"pswRegex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])');",
			"//https://ionicthemes.com/tutorials/about/forms-and-validation-in-ionic",
			"this.formGroup = this.formBuilder.group({",
			"username: ['',",
			"Validators.compose([",
			"Validators.required,",
			"Validators.minLength(5)",
			"]),",
			"],",
			"email: ['',",
			"Validators.compose([",
			"Validators.required,",
			"Validators.email",
			"]),",
			"],",
			"password: ['',",
			"Validators.compose([",
			"Validators.minLength(5),",
			"Validators.required,",
			"Validators.pattern(this.pswRegex)",
			"])",
			"],",
			"terms: ['',",
			"Validators.pattern('true')",
			"]",
			"}, {});",
			"",
			"// convenience getter for easy access to form fields",
			"get f() { return this.signUpForm.controls; }"
		],
		"description": "Add angular formBuilder Group"
	},
	/*###########################################
		Ionic
	#############################################*/
	"Add ionic modal": {
		"prefix": "ionicModal",
		"body": [
			"const modal = await this.modalCtrl.create({",
			"component: $1",
			"swipeToClose: true",
			"//For iOS only",
			"presentingElement: this.routerOutlet.nativeEl",
			"});",
			"await modal.present()",
			" ",
			"const {data} = await modal.onDidDismiss();"
		],
		"description": "Add ionic modal"
	},
}
